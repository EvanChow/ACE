<?xml version="1.0" encoding="UTF-8"?> 
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"   
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">  
  
    <!-- Root Context: defines shared resources visible to all other web components -->  
  
    <!-- dataSource -->  
    <bean id="dataSource"  
        class="org.springframework.jdbc.datasource.DriverManagerDataSource">  
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />  
        <property name="url" value="jdbc:mysql://localhost:3306/avalon" />  
        <property name="username" value="root" />
        <property name="password" value="1112" />
    </bean>
  
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"></bean>  
  
    <!-- 数据库保存的密码是使用MD5算法加密的，所以这里需要配置一个密码匹配对象 -->  
    <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.Md5CredentialsMatcher"></bean>  
    
    
  
    <!-- end MyBatis使用ehcache缓存 -->  

    <!-- 缓存管理器 使用Ehcache实现 -->  
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">  
        <property name="cacheManager" ref="ehCacheManager" />  
    </bean>
    
     <!-- MyBatis使用ehcache缓存 start -->  
    <bean id="ehCacheManager"  
        class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">  
        <property name="configLocation" value="classpath:ehcache.xml" />  
        <property name="shared" value="true"></property> <!-- 这里是关键！！！没有必错  -->  
    </bean>
    
   <!-- 缓存管理器 
    <bean id="cacheManager" class="com.avalon.util.SpringCacheManagerWrapper">
        <property name="cacheManager" ref="shiroCacheManager"/>
    </bean>

	<bean id="shiroCacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="ehcacheManager"/>
    </bean>

    <bean id="ehcacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:ehcache.xml"/> 
    </bean>
      -->
    <!--   
      使用Shiro自带的JdbcRealm类  
      指定密码匹配所需要用到的加密对象  
      指定存储用户、角色、权限许可的数据源及相关查询语句  
     -->  
    <bean id="jdbcRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm">
        <!-- 不加密
        <property name="credentialsMatcher" ref="credentialsMatcher"></property>   -->
        <property name="permissionsLookupEnabled" value="true"></property>  
        <property name="dataSource" ref="dataSource"></property>  
        <property name="authenticationQuery"
            value="SELECT t.PASSWD FROM sys_user t where t.USERNAME=?"></property>  
        <property name="userRolesQuery"
            value="SELECT ROLECODE FROM SYS_USER_ROLE LEFT JOIN SYS_ROLE USING (ROLEID) LEFT JOIN SYS_USER USING (UID) WHERE USERNAME = ?"></property>  
        <property name="permissionsQuery"  
            value="SELECT PERMISSIONNAME FROM SYS_ROLE_PERMISSION  LEFT JOIN SYS_PERMISSION USING(PERMISSIONID) LEFT JOIN SYS_ROLE USING(ROLEID) WHERE ROLECODE =?"></property>  
    </bean>
  
    <!-- Shiro安全管理器 -->  
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
        <property name="realm" ref="jdbcRealm"></property>
        <property name="sessionManager" ref="sessionManager" />
        <property name="cacheManager" ref="cacheManager"/>
        <!--  -->
        <property name="rememberMeManager" ref="rememberMeManager"/>
        
    </bean>
    
    <!-- 会话管理器 --> 
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">   
	    <property name="globalSessionTimeout" value="3600000"/>
	    <property name="deleteInvalidSessions" value="true"/> 
	    <property name="sessionValidationSchedulerEnabled" value="true"/>
	    <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>  
	    <property name="sessionDAO" ref="sessionDAO"/>
	    <property name="sessionIdCookieEnabled" value="true"/>
	    <property name="sessionIdCookie" ref="sessionIdCookie"/>
	    <property name="sessionListeners" ref="mysessionListener" />
    </bean>
      
	 <bean id="mysessionListener" class="com.avalon.listener.shiro.ShiroSessionListener"></bean>
    
    <!-- session会话存储的实现类
    <bean id="mySessionDAO" class="com.avalon.dao.MySessionDao"></bean>
     -->  
      
    <!-- 会话Cookie模板 -->  
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
	  <constructor-arg name="name" value="AVALONSESSIONID"/>
	  <!--  -->
	  <property name="httpOnly" value="true"/>
      <property name="maxAge" value="-1"/>
      
	</bean>
      <!--    定时10分钟检验一次有所session是否有效（毫秒单位）  -->
   <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
    <constructor-arg name="sessionManager" ref="sessionManager"/>
    <property name="interval" value="1800000"/>
	</bean>
	

	<!-- 会话ID生成器 -->
	<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>  
	<!-- 会话DAO  --> 
	<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">  
	    <property name="activeSessionsCacheName" value="activeSessionsCache"/>  
	    <property name="sessionIdGenerator" ref="sessionIdGenerator"/>  
	</bean>
	
	
	    <!-- 国际化配置 -->
    <bean id="messageSource"
        class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basenames" value="i18n.messages" />
        <property name="useCodeAsDefaultMessage" value="true" />
    </bean>
    <bean id="localeResolver"
        class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
          <property name="defaultLocale" value="zh_CN"/>
    </bean>
	

  
    <!--   
       Shiro主过滤器本身功能十分强大，其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行  
       Web应用中，Shiro可控制的Web请求必须经过Shiro主过滤器的拦截，Shiro对基于Spring的Web应用提供了完美的支持   
    -->  
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
        <!-- Shiro的核心安全接口，这个属性是必须的 -->  
        <property name="securityManager" ref="securityManager"></property>  
        
        <!-- 要求登录时的链接(登录页面地址)，非必须的属性，默认会自动寻找Web工程根目录下的"/login.jsp"页面  
        <property name="loginUrl" value="/login.jsp"></property>
        <property name="successUrl" value="/index.jsp"></property>  --> 
        <!-- 登录成功后要跳转的连接(本例中此属性用不到，因为登录成功后的处理逻辑在LoginController里硬编码) -->  
        <!-- <property name="successUrl" value="/" ></property> -->  
        <!-- 用户访问未对其授权的资源时，所显示的连接 -->  
        <property name="unauthorizedUrl" value="/wait.jsp"></property>
        <!-- 权限[anon:可匿名使用,authc:认证才能使用,authcBasic:httpBasic认证] -->  
        <property name="filterChainDefinitions">
            <value>
                /ace/assets/** =anon
                /**/del.do** =authc,roles[admin]
            </value>
        </property>  
    </bean>
    
    
    <!-- rememberMe管理器-->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cipherKey"
                  value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>
    
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="2592000"/>
    </bean>
	 
    
  
    <!--   
       开启Shiro的注解(如@RequiresRoles，@RequiresPermissions)，需借助SpringAOP扫描使用Shiro注解的类，  
       并在必要时进行安全逻辑验证  
    -->  
    
   <!-- 配置文件添加Shiro Spring AOP权限注解的支持-->
	<aop:config proxy-target-class="true"></aop:config>  
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
	    <property name="securityManager" ref="securityManager"/>
	</bean> 
    
    
    
    
</beans> 